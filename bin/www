#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('connect:server');
var http = require('http');
const errorLog = require('../logger/logger').logger;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const {generateMessage} = require('./utils/message');
const {isRealString} = require('./utils/validation');
const {Users} = require('./utils/users');
var users = new Users();



 io.on('connection', function (socket) {
  console.log('New user joined');


//create a private room for client and freelancer based on JobID 
  socket.on('join', (param) => {

      socket.join(param.room);
      users.removeUser(socket.id);
      users.addUser(socket.id, param.name, param.room);
      
      io.to(param.room).emit('updateUserList', users.getUserList(param.room));
      
      socket.emit('newMessage', generateMessage('Connect!', 'Welcome to the discussion platform'));
      socket.broadcast.to(param.room).emit('newMessage', generateMessage('Admin', `${param.name} has Joined`));


  });



  

  socket.on('createMessage', (message) => {
      var user = users.getUser(socket.id);
      io.to(user.room).emit('newMessage', generateMessage(message.from, message.text));
  });



  socket.on('disconnect', () => {
      
      var user = users.removeUser(socket.id);
      
      
      if(user){
          console.log(`${user.name} was Disconnected to server in room ${user.room}`);
          io.to(user.room).emit('updateUserList', users.getUserList(user.room));
          io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has Left`));
      }
      
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
  errorLog.info(`Error Message : ${error}`);
}

/**
 * Event listener for HTTP server "listening" event.
 */






function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  errorLog.info(`Listening: ${addr.port}`);
}
