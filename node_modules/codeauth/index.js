var sha1 = require('sha1');
var mysql = require('mysql');

function code( salt, precision ) {
	this.code = generateCode( precision );
	this.salt = salt;
	this.hash = sha1( this.code + this.salt );
	this.store = function() {
		if (ctx){
			ctx.query("INSERT INTO "+table+" (code, time) VALUES (\""+this.hash+"\", "+(Math.floor(Date.now() / 1000))+")", function(err, rows, fields) {
				if (err) throw err;
			});
		}
	}
}

function check( salt, code, callback ) {
	var hash = sha1( code + salt );
	ctx.query("DELETE FROM "+table+" WHERE time<=\""+(Math.floor(Date.now() / 1000)-86400)+"\"", function(err, rows, fields) {
		if (err) throw err;
		ctx.query("SELECT * FROM "+table+" WHERE code=\""+hash+"\"", function(err, rows, fields) {
			if (err) throw err;
			if (rows.length > 0) {
				ctx.query("DELETE FROM "+table+" WHERE code=\""+hash+"\"", function(err, rows, fields) {
					if (err) throw err;
				});
			}
			callback( (rows.length > 0) );
		});
	});
}

function generateCode( precision ) {
	var number = Math.floor(Math.random()*9);
	if (precision>0){
		return number.toString() + ( generateCode( precision - 1 ) );
	} else {
		return "";
	}
}

var ctx, table;

module.exports = {
	mysql: function( options, callback ) {
		table = options.table;
		ctx = mysql.createConnection({
			host : options.host,
			user : options.user,
			password : options.password,
			database : options.database
		});
		ctx.connect();
		ctx.query("CREATE TABLE IF NOT EXISTS "+options.table+"(id int PRIMARY KEY AUTO_INCREMENT, code varchar(40), time bigint)", function(err, rows, fields) {
			if (err) throw err;
			callback();
		});
	},
	close: function() {
		ctx.end();
	},
	code: code,
	check: check
}